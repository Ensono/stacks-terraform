
[
    {
    "name": "Copy_q8h",
        "type": "Copy",
        "dependsOn": [],
        "policy": {
            "timeout": "0.00:01:00",
            "retry": 0,
            "retryIntervalInSeconds": 30,
            "secureOutput": false,
            "secureInput": false
        },
        "userProperties": [
            {
                "name": "Source",
                "value": "dbo.TestTable"
            },
            {
                "name": "Destination",
                "value": "raw//"
            }
        ],
        "typeProperties": {
            "source": {
                "type": "AzureSqlSource",
                "partitionOption": "None"
            },
            "sink": {
                "type": "DelimitedTextSink",
                "storeSettings": {
                    "type": "AzureBlobFSWriteSettings"
                },
                "formatSettings": {
                    "type": "DelimitedTextWriteSettings",
                    "quoteAllText": true,
                    "fileExtension": ".txt"
                }
            },
            "enableStaging": false,
            "validateDataConsistency": false
        },
        "sourceDataset": {
            "name": "fcSourceDataset",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureSqlDatabase1",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "TestTable"
                }
            },
            "type": "Microsoft.DataFactory/factories/datasets"
        },
        "sourceLinkedService" : {
            "name": "AzureSqlDatabase1",
            "type": "Microsoft.DataFactory/factories/linkedservices",
            "properties": {
                "annotations": [],
                "type": "AzureSqlDatabase",
                "typeProperties": {
                    "connectionString": "integrated security=False;encrypt=True;connection timeout=30;data source=fc-mssqlserver.database.windows.net;initial catalog=fc-mssql_db;user id=missadministrator",
                    "encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRBVEFGQUNUT1JZQDc3NkMzN0VBLTFBNDUtNDFGQy04MkMxLTJGMjhBQTZBREU2Rl9mNmJmZmRhZi03NDAxLTRkZDEtOWRmNS1iNjAzNjk3NjQ4YWYiDQp9"
                }
            }
        },
        "destinationDataset": {
            "name": "fcDestinationDataset",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "ls_adls_datalake",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileSystem": "raw"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "quoteChar": "\""
                },
                "schema": []
            },
            "type": "Microsoft.DataFactory/factories/datasets"
        },
        "destinationLinkedService" : {
            "name": "ls_adls_datalake",
            "type": "Microsoft.DataFactory/factories/linkedservices",
            "properties": {
                "type": "AzureBlobFS",
                "typeProperties": {
                    "url": "https://fcadls.dfs.core.windows.net/"
                },
                "annotations": []
            }
        },
        "inputs": [
            {
                "referenceName": "fcSourceDataset",
                "type": "DatasetReference"
            }
        ],
        "outputs": [
            {
                "referenceName": "fcDestinationDataset",
                "type": "DatasetReference"
            }
        ]
    }
]





[
    {
        "name": "get_config_file",
        "description": "Get the config file for ingestion.",
        "type": "Lookup",
        "dependsOn": [],
        "policy": {
            "timeout": "0.00:02:00",
            "retry": 0,
            "retryIntervalInSeconds": 30,
            "secureOutput": false,
            "secureInput": false
        },
        "userProperties": [],
        "typeProperties": {
            "source": {
                "type": "JsonSource",
                "storeSettings": {
                    "type": "AzureBlobStorageReadSettings",
                    "recursive": false,
                    "enablePartitionDiscovery": false
                },
                "formatSettings": {
                    "type": "JsonReadSettings"
                }
            },
            "dataset": {
                "referenceName": "ds_input_blob_config",
                "type": "DatasetReference",
                "parameters": {
                    "filename": {
                        "value": "@if(equals(pipeline().parameters.testConfig, 'false'),\n    concat(variables('pipelineName'), '.json'),\n    pipeline().parameters.testConfig\n)",
                        "type": "Expression"
                    },
                    "path": {
                        "value": "@if(equals(pipeline().parameters.testConfig, 'false'),\n    'config',\n    concat('tests/config/', variables('pipelineName'), '/')\n)",
                        "type": "Expression"
                    }
                }
            },
            "firstRowOnly": false
        }
    },
    {
        "name": "for_each_input",
        "description": "Ingest all the input data sources.",
        "type": "ForEach",
        "dependsOn": [
            {
                "activity": "get_config_file",
                "dependencyConditions": [
                    "Completed"
                ]
            }
        ],
        "userProperties": [],
        "typeProperties": {
            "items": {
                "value": "@if(\n    contains(activity('get_config_file').output, 'value'),\n    activity('get_config_file').output.value,\n    array(json('{}'))\n)",
                "type": "Expression"
            },
            "isSequential": false,
            "batchCount": 4,
            "activities": [
                {
                    "name": "copy_datalake_raw",
                    "description": "Copy the raw data from the source system to the Data factory landing area.",
                    "type": "Copy",
                    "dependsOn": [],
                    "policy": {
                        "timeout": "0.00:10:00",
                        "retry": 0,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                    },
                    "userProperties": [],
                    "typeProperties": {
                        "source": {
                            "type": "AzureSqlSource",
                            "additionalColumns": [
                                {
                                    "name": "meta_ingestion_datetime",
                                    "value": {
                                        "value": "@utcNow()",
                                        "type": "Expression"
                                    }
                                },
                                {
                                    "name": "meta_ingestion_source",
                                    "value": {
                                        "value": "@if(\r\n    contains(item(), 'system'),\r\n    item().system,\r\n    'Unknown'\r\n)",
                                        "type": "Expression"
                                    }
                                },
                                {
                                    "name": "meta_ingestion_run_id",
                                    "value": {
                                        "value": "@pipeline().RunId",
                                        "type": "Expression"
                                    }
                                }
                            ],
                            "sqlReaderQuery": {
                                "value": "@concat(\n  'SELECT * FROM ',\n if(contains(item(), 'schema'), if(empty(item().schema), '', concat(item().schema, '.')), ''),\n  item().name,\n  if(equals(item().type, 'incremental'), \n    concat(\n      ' WHERE ',\n      item().delta,\n      ' >= ',\n      if(\n        contains(item().entity_type, 'oracle'),\n        'timestamp ''',\n        ''''\n      ),\n      pipeline().parameters.windowStart,\n      ''' AND ',\n      item().delta,\n      ' < ',\n      if(\n        contains(item().entity_type, 'oracle'),\n        'timestamp ''',\n        ''''\n      ),\n      pipeline().parameters.windowEnd,\n      ''''\n    )\n    , '')\n)",
                                "type": "Expression"
                            },
                            "queryTimeout": "00:10:00",
                            "partitionOption": "None"
                        },
                        "sink": {
                            "type": "ParquetSink",
                            "storeSettings": {
                                "type": "AzureBlobFSWriteSettings"
                            },
                            "formatSettings": {
                                "type": "ParquetWriteSettings"
                            }
                        },
                        "enableStaging": false,
                        "validateDataConsistency": true,
                        "logSettings": {
                            "enableCopyActivityLog": true,
                            "copyActivityLogSettings": {
                                "logLevel": "Warning",
                                "enableReliableLogging": true
                            },
                            "logLocationSettings": {
                                "linkedServiceName": {
                                    "referenceName": "ls_blob",
                                    "type": "LinkedServiceReference"
                                },
                                "path": {
                                    "value": "@concat(\n  'data-platform/logs/',\n  item().system\n)",
                                    "type": "Expression"
                                }
                            }
                        },
                        "translator": {
                            "type": "TabularTranslator",
                            "typeConversion": true,
                            "typeConversionSettings": {
                                "allowDataTruncation": true,
                                "treatBooleanAsNumber": false
                            }
                        }
                    },
                    "inputs": [
                        {
                            "referenceName": "ds_input_blob_config",
                            "type": "DatasetReference"
                        }
                    ],
                    "outputs": [
                        {
                            "referenceName": "ds_output_adls_datalake_raw",
                            "type": "DatasetReference",
                            "parameters": {
                                "directory": {
                                    "value": "@concat(\n    item().system,\n    '/',\n    item().displayName,\n    '/',\n    'v', item().version,\n    '/',\n    formatDateTime(pipeline().parameters.windowEnd, \n        if(\n            equals(item().granularity, 'month'),\n            'yyyy/MM',\n            if(\n                equals(item().granularity, 'hour'),\n                'yyyy/MM/dd/HH',\n                if(\n                    equals(item().granularity, 'minute'),\n                    'yyyy/MM/dd/HH/mm',\n                    'yyyy/MM/dd'\n                )\n            )\n        )\n    )\n)",
                                    "type": "Expression"
                                },
                                "filename": {
                                    "value": "@concat(item().displayName, '.parquet')",
                                    "type": "Expression"
                                }
                            }
                        }
                    ]
                },
                {
                    "name": "log_error",
                    "type": "AzureFunctionActivity",
                    "dependsOn": [
                        {
                            "activity": "copy_datalake_raw",
                            "dependencyConditions": [
                                "Failed"
                            ]
                        }
                    ],
                    "policy": {
                        "timeout": "0.00:10:00",
                        "retry": 0,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                    },
                    "userProperties": [],
                    "typeProperties": {
                        "functionName": {
                            "value": "@concat('log_error?pipeline_run_id=', pipeline().RunId)",
                            "type": "Expression"
                        },
                        "method": "POST",
                        "body": {
                            "value": "@string(\n    union(\n        json(concat(\n            '{\"error_message\":\"',\n            if(\n                empty(activity('copy_datalake_raw').output),\n                'Unknown error. Is there a valid config.json input file?',\n                activity('copy_datalake_raw').output.errors[0].Message\n            ), '\"}'\n        )),\n        item()\n    )\n)",
                            "type": "Expression"
                        }
                    },
                    "linkedServiceName": {
                        "referenceName": "ls_adls_datalake",
                        "type": "LinkedServiceReference"
                    }
                },
                {
                    "name": "set_error_flag",
                    "type": "SetVariable",
                    "dependsOn": [
                        {
                            "activity": "log_error",
                            "dependencyConditions": [
                                "Completed"
                            ]
                        }
                    ],
                    "userProperties": [],
                    "typeProperties": {
                        "variableName": "errorFlag",
                        "value": "1"
                    }
                },
                {
                    "name": "get_metadata",
                    "type": "GetMetadata",
                    "dependsOn": [
                        {
                            "activity": "copy_datalake_raw",
                            "dependencyConditions": [
                                "Succeeded"
                            ]
                        }
                    ],
                    "policy": {
                        "timeout": "7.00:00:00",
                        "retry": 3,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                    },
                    "userProperties": [],
                    "typeProperties": {
                        "dataset": {
                            "referenceName": "ds_output_adls_datalake_raw",
                            "type": "DatasetReference",
                            "parameters": {
                                "directory": {
                                    "value": "@concat(\n    item().system,\n    '/',\n    item().displayName,\n    '/',\n    'v', item().version,\n    '/',\n    formatDateTime(pipeline().parameters.windowEnd, \n        if(\n            equals(item().granularity, 'month'),\n            'yyyy/MM',\n            if(\n                equals(item().granularity, 'hour'),\n                'yyyy/MM/dd/HH',\n                if(\n                    equals(item().granularity, 'minute'),\n                    'yyyy/MM/dd/HH/mm',\n                    'yyyy/MM/dd'\n                )\n            )\n        )\n    )\n)",
                                    "type": "Expression"
                                },
                                "filename": {
                                    "value": "@concat(item().displayName, '.parquet')",
                                    "type": "Expression"
                                }
                            }
                        },
                        "fieldList": [
                            "structure"
                        ],
                        "storeSettings": {
                            "type": "AzureBlobFSReadSettings",
                            "recursive": true,
                            "enablePartitionDiscovery": false
                        }
                    }
                },
                {
                    "name": "create_metadata",
                    "type": "AzureFunctionActivity",
                    "dependsOn": [
                        {
                            "activity": "get_metadata",
                            "dependencyConditions": [
                                "Succeeded"
                            ]
                        }
                    ],
                    "policy": {
                        "timeout": "7.00:00:00",
                        "retry": 3,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                    },
                    "userProperties": [],
                    "typeProperties": {
                        "functionName": "create_metadata",
                        "method": "POST",
                        "body": {
                            "value": "@string(    \n    union(\n        activity('copy_datalake_raw').output,\n        activity('get_metadata').output,\n        item(),\n        json(\n            concat(\n                '{\"pipeline_name\":\"',\n                variables('pipelineName'),\n                '\", \"data_factory\":\"',\n                variables('adfName'),\n                '\", \"environment\":\"',\n                variables('env'),\n                '\"}'\n            )\n        )\n    )\n)",
                            "type": "Expression"
                        }
                    },
                    "linkedServiceName": {
                        "referenceName": "ls_adls_datalake",
                        "type": "LinkedServiceReference"
                    }
                }                                
            ]
        }
    },
    {
        "name": "handle_error",
        "type": "IfCondition",
        "dependsOn": [
            {
                "activity": "stage_data",
                "dependencyConditions": [
                    "Completed"
                ]
            }
        ],
        "userProperties": [],
        "typeProperties": {
            "expression": {
                "value": "@empty(variables('errorFlag'))",
                "type": "Expression"
            },
            "ifFalseActivities": [
                {
                    "name": "create_incident",
                    "type": "AzureFunctionActivity",
                    "dependsOn": [],
                    "policy": {
                        "timeout": "0.00:10:00",
                        "retry": 0,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                    },
                    "userProperties": [],
                    "typeProperties": {
                        "functionName": {
                            "value": "@concat('create_incident?pipeline_run_id=', pipeline().RunId)",
                            "type": "Expression"
                        },
                        "method": "POST",
                        "body": "{}"
                    },
                    "linkedServiceName": {
                        "referenceName": "ls_adls_datalake",
                        "type": "LinkedServiceReference"
                    }
                },
                {
                    "name": "force_failure",
                    "type": "SetVariable",
                    "dependsOn": [
                        {
                            "activity": "create_incident",
                            "dependencyConditions": [
                                "Completed"
                            ]
                        }
                    ],
                    "userProperties": [],
                    "typeProperties": {
                        "variableName": "errorFlag",
                        "value": {
                            "value": "@createArray('The pipeline has failed. A service desk incident has been raised.')[1]",
                            "type": "Expression"
                        }
                    }
                }                 
            ]
        }
    },
    {
        "name": "stage_data",
        "type": "IfCondition",
        "dependsOn": [
            {
                "activity": "for_each_input",
                "dependencyConditions": [
                    "Completed"
                ]
            }
        ],
        "userProperties": [],
        "typeProperties": {
            "expression": {
                "value": "@empty(variables('errorFlag'))",
                "type": "Expression"
            },
            "ifTrueActivities": [
                {
                    "name": "staging_job",
                    "type": "DatabricksSparkPython",
                    "dependsOn": [],
                    "policy": {
                        "timeout": "7.00:00:00",
                        "retry": 0,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                    },
                    "userProperties": [],
                    "typeProperties": {
                        "pythonFile": {
                            "value": "@concat(\n    'dbfs:/spark_jobs/staging_',\n    variables('pipelineName'),\n    '/main.py'\n)",
                            "type": "Expression"
                        },
                        "parameters": [
                            "@string(activity('get_config_file').output.value)",
                            "@pipeline().parameters.windowEnd",
                            "@variables('pipelineName')",
                            "@variables('adfName')",
                            "@variables('env')"
                        ],
                        "libraries": [
                            {
                                "whl": "dbfs:/utils_packages/data_utils/data_utils-1-py3-none-any.whl"
                            }
                        ]
                    },
                    "linkedServiceName": {
                        "referenceName": "ls_blob",
                        "type": "LinkedServiceReference"
                    }
                },
                {
                    "name": "log_staging_error",
                    "type": "AzureFunctionActivity",
                    "dependsOn": [
                        {
                            "activity": "staging_job",
                            "dependencyConditions": [
                                "Failed"
                            ]
                        }
                    ],
                    "policy": {
                        "timeout": "0.00:10:00",
                        "retry": 0,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                    },
                    "userProperties": [],
                    "typeProperties": {
                        "functionName": {
                            "value": "@concat('log_error?pipeline_run_id=', pipeline().RunId)",
                            "type": "Expression"
                        },
                        "method": "POST",
                        "body": {
                            "value": "@string(\n    json(concat(\n        '{\"error_message\":\"',\n        if(\n            empty(activity('staging_job').output),\n            'Unknown Databricks staging error.',\n            concat(\n                'Databricks error. For more details please check the run page url: ',\n                activity('staging_job').output.runPageUrl\n            )\n        ),'\", \"system\":\"',\n        variables('pipelineName'),\n        '\"}'\n    ))\n)",
                            "type": "Expression"
                        }
                    },
                    "linkedServiceName": {
                        "referenceName": "ls_adls_datalake",
                        "type": "LinkedServiceReference"
                    }
                },
                {
                    "name": "set_staging_error_flag",
                    "type": "SetVariable",
                    "dependsOn": [
                        {
                            "activity": "log_staging_error",
                            "dependencyConditions": [
                                "Completed"
                            ]
                        }
                    ],
                    "userProperties": [],
                    "typeProperties": {
                        "variableName": "errorFlag",
                        "value": "1"
                    }
                }
            ]
        }
    },
    {
        "name": "data_quality",
        "type": "IfCondition",
        "dependsOn": [
            {
                "activity": "stage_data",
                "dependencyConditions": [
                    "Completed"
                ]
            }
        ],
        "userProperties": [],
        "typeProperties": {
            "expression": {
                "value": "@empty(variables('errorFlag'))",
                "type": "Expression"
            },
            "ifTrueActivities": [
                {
                    "name": "data_quality_job",
                    "type": "DatabricksSparkPython",
                    "dependsOn": [],
                    "policy": {
                        "timeout": "7.00:00:00",
                        "retry": 0,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                    },
                    "userProperties": [],
                    "typeProperties": {
                        "pythonFile": {
                            "value": "@concat(\n    'dbfs:/spark_jobs/staging_',\n    variables('pipelineName'),\n    '/data_quality.py'\n)",
                            "type": "Expression"
                        },
                        "parameters": [],
                        "libraries": [
                            {
                                "whl": "dbfs:/utils_packages/data_utils/data_utils-1-py3-none-any.whl"
                            },
                            {
                                "pypi": {
                                    "package": "great-expectations"
                                }
                            }
                        ]
                    },
                    "linkedServiceName": {
                        "referenceName": "ls_blob",
                        "type": "LinkedServiceReference"
                    }
                },
                {
                    "name": "log_quality_error",
                    "type": "AzureFunctionActivity",
                    "dependsOn": [
                        {
                            "activity": "data_quality_job",
                            "dependencyConditions": [
                                "Failed"
                            ]
                        }
                    ],
                    "policy": {
                        "timeout": "0.00:10:00",
                        "retry": 0,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                    },
                    "userProperties": [],
                    "typeProperties": {
                        "functionName": {
                            "value": "@concat('log_error?pipeline_run_id=', pipeline().RunId)",
                            "type": "Expression"
                        },
                        "method": "POST",
                        "body": {
                            "value": "@string(\n    json(concat(\n        '{\"error_message\":\"',\n        if(\n            empty(activity('data_quality_job').output),\n            'Data quality threshhold error.',\n            concat(\n                'Data quality error. For more details please check the run page url: ',\n                activity('data_quality_job').output.runPageUrl\n            )\n        ),'\", \"system\":\"',\n        'test_dataframe',\n        '\"}'\n    ))\n)",
                            "type": "Expression"
                        }
                    },
                    "linkedServiceName": {
                        "referenceName": "ls_adls_datalake",
                        "type": "LinkedServiceReference"
                    }
                },
                {
                    "name": "create_quality_incident",
                    "type": "AzureFunctionActivity",
                    "dependsOn": [
                        {
                            "activity": "log_quality_error",
                            "dependencyConditions": [
                                "Completed"
                            ]
                        }
                    ],
                    "policy": {
                        "timeout": "0.00:10:00",
                        "retry": 0,
                        "retryIntervalInSeconds": 30,
                        "secureOutput": false,
                        "secureInput": false
                    },
                    "userProperties": [],
                    "typeProperties": {
                        "functionName": {
                            "value": "@concat('create_incident?pipeline_run_id=', pipeline().RunId)",
                            "type": "Expression"
                        },
                        "method": "POST",
                        "body": "{}"
                    },
                    "linkedServiceName": {
                        "referenceName": "ls_adls_datalake",
                        "type": "LinkedServiceReference"
                    }
                }
            ]
        }
    }
]